diff --git a/app/src/main/java/com/mmjang/ankihelper/ui/popup/PopupActivity.java b/app/src/main/java/com/mmjang/ankihelper/ui/popup/PopupActivity.java
index f048954..9c69c92 100644
--- a/app/src/main/java/com/mmjang/ankihelper/ui/popup/PopupActivity.java
+++ b/app/src/main/java/com/mmjang/ankihelper/ui/popup/PopupActivity.java
@@ -5,7 +5,6 @@ import android.app.AlertDialog;
 import android.content.Context;
 import android.content.DialogInterface;
 import android.content.Intent;
-import android.graphics.Color;
 import android.os.Build;
 import android.os.Bundle;
 import android.os.Handler;
@@ -13,6 +12,7 @@ import android.os.Message;
 import android.support.v4.content.ContextCompat;
 import android.support.v7.widget.RecyclerView;
 import android.text.Html;
+import android.text.TextUtils;
 import android.util.Log;
 import android.view.LayoutInflater;
 import android.view.MotionEvent;
@@ -46,12 +46,13 @@ import com.mmjang.ankihelper.data.plan.OutputPlan;
 import com.mmjang.ankihelper.domain.CBWatcherService;
 import com.mmjang.ankihelper.domain.PlayAudioManager;
 import com.mmjang.ankihelper.domain.PronounceManager;
+import com.mmjang.ankihelper.ui.widget.BigBangLayout;
+import com.mmjang.ankihelper.ui.widget.BigBangLayoutWrapper;
 import com.mmjang.ankihelper.util.Constant;
-import com.mmjang.ankihelper.util.TextSegment;
+import com.mmjang.ankihelper.util.FieldUtil;
 import com.mmjang.ankihelper.util.TextSplitter;
 import com.mmjang.ankihelper.util.Utils;
 
-import org.apmem.tools.layouts.FlowLayout;
 import org.litepal.crud.DataSupport;
 
 import java.util.HashSet;
@@ -60,13 +61,11 @@ import java.util.Map;
 
 import me.everything.android.ui.overscroll.OverScrollDecoratorHelper;
 
+import static com.mmjang.ankihelper.util.FieldUtil.getBlankSentence;
+import static com.mmjang.ankihelper.util.FieldUtil.getBoldSentence;
 
-public class PopupActivity extends Activity {
 
-    //constant
-    private static final int STATE_NON_WORD = 0;
-    private static final int STATE_WORD = 1;
-    private static final int STATE_SELECTED = 2;
+public class PopupActivity extends Activity implements BigBangLayoutWrapper.ActionListener{
 
     List<IDictionary> dictionaryList;
     IDictionary currentDicitonary;
@@ -90,7 +89,6 @@ public class PopupActivity extends Activity {
     Spinner planSpinner;
     Spinner pronounceLanguageSpinner;
     RecyclerView recyclerViewDefinitionList;
-    FlowLayout wordSelectBox;
     ImageButton mBtnEditNote;
     ImageButton mBtnEditTag;
     ProgressBar progressBar;
@@ -116,6 +114,8 @@ public class PopupActivity extends Activity {
             }
         }
     };
+    private BigBangLayout bigBangLayout;
+    private BigBangLayoutWrapper bigBangLayoutWrapper;
 
     @Override
     protected void onCreate(Bundle savedInstanceState) {
@@ -128,6 +128,7 @@ public class PopupActivity extends Activity {
         OverScrollDecoratorHelper.setUpOverScroll(scrollView);
         //
         assignViews();
+        initBigBangLayout();
         loadData(); //dictionaryList;
         populatePlanSpinner();
         populateLanguageSpinner();
@@ -137,11 +138,18 @@ public class PopupActivity extends Activity {
             startCBService();
         }
 
-        for (int i = 0; i < wordSelectBox.getChildCount(); i++) {
-            TextView child = (TextView) wordSelectBox.getChildAt(i);
-            if (mTargetWord != null && child.getText().toString().equals(mTargetWord)) {
-                child.performClick();
-                return;
+        setTargetWord();
+    }
+
+    private void setTargetWord(){
+        if (!TextUtils.isEmpty(mTargetWord)) {
+            for (BigBangLayout.Line line : bigBangLayout.getLines()) {
+                List<BigBangLayout.Item> items = line.getItems();
+                for (BigBangLayout.Item item : items) {
+                    if (item.getText().equals(mTargetWord)) {
+                        item.setSelected(true);
+                    }
+                }
             }
         }
     }
@@ -163,11 +171,12 @@ public class PopupActivity extends Activity {
         planSpinner = (Spinner) findViewById(R.id.plan_spinner);
         pronounceLanguageSpinner = (Spinner) findViewById(R.id.language_spinner);
         recyclerViewDefinitionList = (RecyclerView) findViewById(R.id.recycler_view_definition_list);
-        wordSelectBox = (FlowLayout) findViewById(R.id.words_select_box);
         viewDefinitionList = (LinearLayout) findViewById(R.id.view_definition_list);
         mBtnEditNote = (ImageButton) findViewById(R.id.btn_edit_note);
         mBtnEditTag = (ImageButton) findViewById(R.id.btn_edit_tag);
         progressBar = (ProgressBar) findViewById(R.id.progress_bar);
+        bigBangLayout = (BigBangLayout) findViewById(R.id.bigbang);
+        bigBangLayoutWrapper = (BigBangLayoutWrapper) findViewById(R.id.bigbang_wrapper);
     }
 
     private void loadData() {
@@ -232,7 +241,7 @@ public class PopupActivity extends Activity {
         }
     }
 
-    private void populateLanguageSpinner(){
+    private void populateLanguageSpinner() {
 
         String[] languages = PronounceManager.getAvailablePronounceLanguage();
         ArrayAdapter<String> languagesSpinnerAdapter = new ArrayAdapter<>(
@@ -244,6 +253,18 @@ public class PopupActivity extends Activity {
 
     }
 
+    private void initBigBangLayout(){
+        bigBangLayout.setShowSymbol(true);
+        bigBangLayout.setShowSpace(false);
+        bigBangLayout.setItemSpace(0);
+        bigBangLayout.setLineSpace(0);
+        bigBangLayout.setTextPadding(5);
+        bigBangLayout.setTextPaddingPort(5);
+        bigBangLayoutWrapper.setStickHeader(true);
+        bigBangLayoutWrapper.setActionListener(this);
+
+    }
+
     private void setEventListener() {
 
         //auto finish
@@ -391,110 +412,16 @@ public class PopupActivity extends Activity {
         if (mTextToProcess == null) {
             return;
         }
-        mTextSplitter = new TextSplitter(mTextToProcess, STATE_NON_WORD, STATE_WORD);
-        populateWordSelectBox(mTextSplitter);
+        populateWordSelectBox();
     }
 
-    private void populateWordSelectBox(TextSplitter splitter) {
-        //todo: this is dirty, be sure to reimplement later.
-        for (TextSegment ts : splitter.getSegmentList()) {
-            wordSelectBox.addView(getWordSelectBoxItem(ts));
+    private void populateWordSelectBox() {
+        List<String> localSegments = TextSplitter.getLocalSegments(mTextToProcess);
+        for (String localSegment : localSegments) {
+            bigBangLayout.addTextItem(localSegment);
         }
     }
 
-    private TextView getWordSelectBoxItem(final TextSegment textSegment) {
-        int pad1 = Utils.getPX(PopupActivity.this, 1);
-        final String text = textSegment.getText();
-        int state = textSegment.getState();
-        TextView tv = new TextView(this);
-        tv.setText(text);
-        FlowLayout.LayoutParams fllp = new FlowLayout.LayoutParams(
-                FlowLayout.LayoutParams.WRAP_CONTENT, FlowLayout.LayoutParams.WRAP_CONTENT);
-        int pad = Utils.getPX(PopupActivity.this, 2);
-        fllp.setMargins(0, 0, 0, 0);
-        tv.setLayoutParams(fllp);
-        switch (state) {
-            case STATE_NON_WORD:
-                tv.setTextColor(Color.BLACK);
-                tv.setBackground(ContextCompat.getDrawable(
-                        PopupActivity.this, R.drawable.word_select_box_item_trans));
-                tv.setPadding(0, pad, 0, pad);
-                break;
-            case STATE_WORD:
-                tv.setBackground(ContextCompat.getDrawable(
-                        PopupActivity.this, R.drawable.word_select_box_item));
-                tv.setTextColor(Color.BLACK);
-                tv.setPadding(pad, pad, pad, pad);
-                break;
-        }
-
-        tv.setOnClickListener(
-                new View.OnClickListener() {
-                    @Override
-                    public void onClick(View v) {
-                        TextView textView = (TextView) v;
-                        if (textSegment.getState() == STATE_NON_WORD) {
-                            return;
-                        }
-                        if (textSegment.getState() == STATE_WORD) {
-                            textSegment.setState(STATE_SELECTED);
-                            textView.setBackground(ContextCompat.getDrawable(
-                                    PopupActivity.this, R.drawable.word_select_box_item_hl));
-                            textView.setTextColor(Color.WHITE);
-                            mCurrentKeyWord = mTextSplitter.getStringFromState(STATE_SELECTED);
-                            act.setText(mCurrentKeyWord);
-                            asyncSearch(mCurrentKeyWord);
-                            return;
-                        }
-                        if (textSegment.getState() == STATE_SELECTED) {
-                            textSegment.setState(STATE_WORD);
-                            textView.setBackground(ContextCompat.getDrawable(
-                                    PopupActivity.this, R.drawable.word_select_box_item));
-                            textView.setTextColor(Color.BLACK);
-                            mCurrentKeyWord = mTextSplitter.getStringFromState(STATE_SELECTED);
-                            act.setText(mCurrentKeyWord);
-                            asyncSearch(mCurrentKeyWord);
-                            return;
-                        }
-                    }
-                }
-        );
-
-        tv.setOnLongClickListener(
-                new View.OnLongClickListener() {
-                    @Override
-                    public boolean onLongClick(View v) {
-                        TextView textView = (TextView) v;
-                        if (textSegment.getState() == STATE_NON_WORD) {
-                            return false;
-                        }
-                        if (textSegment.getState() == STATE_WORD) {
-                            for (int i = 0; i < wordSelectBox.getChildCount(); i++) {
-                                TextView child = (TextView) wordSelectBox.getChildAt(i);
-                                child.setBackground(ContextCompat.getDrawable(
-                                        PopupActivity.this, R.drawable.word_select_box_item));
-                                child.setTextColor(Color.BLACK);
-                                mTextSplitter.getSegmentList().get(i).setState(STATE_WORD);
-                            }
-                            textSegment.setState(STATE_SELECTED);
-                            textView.setBackground(ContextCompat.getDrawable(
-                                    PopupActivity.this, R.drawable.word_select_box_item_hl));
-                            textView.setTextColor(Color.WHITE);
-                            mCurrentKeyWord = mTextSplitter.getStringFromState(STATE_SELECTED);
-                            act.setText(mCurrentKeyWord);
-                            asyncSearch(mCurrentKeyWord);
-                            return true;
-                        }
-                        if (textSegment.getState() == STATE_SELECTED) {
-                            return false;
-                        }
-                        return false;
-                    }
-                }
-        );
-
-        return tv;
-    }
 
     private void asyncSearch(final String word) {
         if (word.length() == 0) {
@@ -546,46 +473,46 @@ public class PopupActivity extends Activity {
                     public void onClick(View v) {
                         AnkiDroidHelper mAnkiDroid = MyApplication.getAnkiDroid();
                         String[] sharedExportElements = Constant.getSharedExportElements();
-                        String[] flds = new String[currentOutputPlan.getFieldsMap().size()];
+                        String[] exportFields = new String[currentOutputPlan.getFieldsMap().size()];
                         int i = 0;
                         Map<String, String> map = currentOutputPlan.getFieldsMap();
-                        for (String key : currentOutputPlan.getFieldsMap().values()) {
-                            if (key.equals(sharedExportElements[0])) {
-                                flds[i] = "";
+                        for (String exportedFieldKey : currentOutputPlan.getFieldsMap().values()) {
+                            if (exportedFieldKey.equals(sharedExportElements[0])) {
+                                exportFields[i] = "";
                                 i++;
                                 continue;
                             }
-                            if (key.equals(sharedExportElements[1])) {
-                                flds[i] = mTextSplitter.getBoldSentence(2);
+                            if (exportedFieldKey.equals(sharedExportElements[1])) {
+                                exportFields[i] = getBoldSentence(bigBangLayout.getLines());
                                 i++;
                                 continue;
                             }
-                            if (key.equals(sharedExportElements[2])) {
-                                flds[i] = mTextSplitter.getBlankSentence(2);
+                            if (exportedFieldKey.equals(sharedExportElements[2])) {
+                                exportFields[i] = getBlankSentence(bigBangLayout.getLines());
                                 i++;
                                 continue;
                             }
-                            if (key.equals(sharedExportElements[3])) {
-                                flds[i] = mNoteEditedByUser;
+                            if (exportedFieldKey.equals(sharedExportElements[3])) {
+                                exportFields[i] = mNoteEditedByUser;
                                 i++;
                                 continue;
                             }
-                            if (key.equals(sharedExportElements[4])) {
-                                flds[i] = mUrl;
+                            if (exportedFieldKey.equals(sharedExportElements[4])) {
+                                exportFields[i] = mUrl;
                                 i++;
                                 continue;
                             }
-                            if (def.hasElement(key)) {
-                                flds[i] = def.getExportElement(key);
+                            if (def.hasElement(exportedFieldKey)) {
+                                exportFields[i] = def.getExportElement(exportedFieldKey);
                                 i++;
                                 continue;
                             }
-                            flds[i] = "";
+                            exportFields[i] = "";
                             i++;
                         }
                         long deckId = currentOutputPlan.getOutputDeckId();
                         long modelId = currentOutputPlan.getOutputModelId();
-                        Long result = mAnkiDroid.getApi().addNote(modelId, deckId, flds, mTagEditedByUser);
+                        Long result = mAnkiDroid.getApi().addNote(modelId, deckId, exportFields, mTagEditedByUser);
                         if (result != null) {
                             Toast.makeText(PopupActivity.this, R.string.str_added, Toast.LENGTH_SHORT).show();
                             btnAddDefinition.setBackground(ContextCompat.getDrawable(
@@ -741,4 +668,63 @@ public class PopupActivity extends Activity {
     private void showPronounce(boolean shouldShow) {
         btnPronounce.setVisibility(shouldShow ? View.VISIBLE : View.GONE);
     }
+
+    @Override
+    public void onSelected(String text) {
+        String currentWord = FieldUtil.getSelectedText(bigBangLayout.getLines());
+        if (!currentWord.equals(act.getText().toString())) {
+            act.setText(currentWord);
+            asyncSearch(currentWord);
+        }
+    }
+
+    @Override
+    public void onSearch(String text) {
+
+    }
+
+    @Override
+    public void onShare(String text) {
+
+    }
+
+    @Override
+    public void onCopy(String text) {
+
+    }
+
+    @Override
+    public void onTrans(String text) {
+
+    }
+
+    @Override
+    public void onDrag() {
+
+    }
+
+    @Override
+    public void onSwitchType(boolean isLocal) {
+
+    }
+
+    @Override
+    public void onSwitchSymbol(boolean isShow) {
+
+    }
+
+    @Override
+    public void onSwitchSection(boolean isShow) {
+
+    }
+
+    @Override
+    public void onDragSelection() {
+
+    }
+
+    @Override
+    public void onCancel() {
+
+    }
 }
diff --git a/app/src/main/java/com/mmjang/ankihelper/ui/widget/BigBangHeader.java b/app/src/main/java/com/mmjang/ankihelper/ui/widget/BigBangHeader.java
index b1d6aca..a44b638 100644
--- a/app/src/main/java/com/mmjang/ankihelper/ui/widget/BigBangHeader.java
+++ b/app/src/main/java/com/mmjang/ankihelper/ui/widget/BigBangHeader.java
@@ -22,7 +22,7 @@ class BigBangHeader extends ViewGroup implements View.OnClickListener {
     ImageView mSearch;
     ImageView mShare;
     ImageView mCopy;
-//    ImageView mDrag;
+    //    ImageView mDrag;
     ImageView mTrans;
     ImageView mClose;
 
@@ -34,8 +34,8 @@ class BigBangHeader extends ViewGroup implements View.OnClickListener {
     private int mActionGap;
     private int mContentPadding;
     private ActionListener mActionListener;
-    private boolean dragMode=false;
-    private boolean stickHeader=false;
+    private boolean dragMode = false;
+    private boolean stickHeader = false;
 
     public BigBangHeader(Context context) {
         this(context, null);
@@ -79,7 +79,7 @@ class BigBangHeader extends ViewGroup implements View.OnClickListener {
 //        mDrag.setImageResource(R.drawable.ic_sort_white_36dp);
 //        mDrag.setOnClickListener(this);
 
-        mTrans=new ImageView(context);
+        mTrans = new ImageView(context);
         mTrans.setImageResource(R.drawable.ic_compare_arrows_white_36dp);
         mTrans.setOnClickListener(this);
         mTrans.setContentDescription(getContext().getString(R.string.app_name));
@@ -93,7 +93,7 @@ class BigBangHeader extends ViewGroup implements View.OnClickListener {
 //        mSelectOther.setOnClickListener(this);
 
 
-        mClose=new ImageView(context);
+        mClose = new ImageView(context);
         mClose.setImageResource(R.drawable.ic_close_capture);
         mClose.setOnClickListener(this);
         mClose.setContentDescription(getContext().getString(R.string.app_name));
@@ -151,8 +151,8 @@ class BigBangHeader extends ViewGroup implements View.OnClickListener {
         int height = getMeasuredHeight();
 
         layoutSubView(mSearch, mActionGap, 0);
-        layoutSubView(mShare, 2 * mActionGap + mSearch.getMeasuredWidth() , 0);
-        layoutSubView(mTrans, 3 * mActionGap + mTrans.getMeasuredWidth()+ mShare.getMeasuredWidth() , 0);
+        layoutSubView(mShare, 2 * mActionGap + mSearch.getMeasuredWidth(), 0);
+        layoutSubView(mTrans, 3 * mActionGap + mTrans.getMeasuredWidth() + mShare.getMeasuredWidth(), 0);
 
 //        layoutSubView(mSelectAll, 2 * mActionGap + mSearch.getMeasuredWidth() , 0);
 //        layoutSubView(mSelectOther, 3 * mActionGap + mTrans.getMeasuredWidth()+ mShare.getMeasuredWidth() , 0);
@@ -169,14 +169,17 @@ class BigBangHeader extends ViewGroup implements View.OnClickListener {
         }
     }
 
-    private class BoundWrapper{
+    private class BoundWrapper {
         Rect bound;
-        public BoundWrapper(Rect bound){
-            this.bound=bound;
+
+        public BoundWrapper(Rect bound) {
+            this.bound = bound;
         }
+
         public Rect getBound() {
             return bound;
         }
+
         public void setBound(Rect bound) {
             this.bound = bound;
             mBorder.setBounds(bound);
@@ -225,8 +228,10 @@ class BigBangHeader extends ViewGroup implements View.OnClickListener {
             mActionListener.onShare();
         } else if (v == mCopy) {
             mActionListener.onCopy();
-        }else if (v==mTrans){
+        } else if (v == mTrans) {
             mActionListener.onTrans();
+        } else if (v == mClose) {
+            mActionListener.onCancel();
 //        }else if (v==mDrag){
 //            dragMode=!dragMode;
 //            if (dragMode) {
@@ -254,9 +259,13 @@ class BigBangHeader extends ViewGroup implements View.OnClickListener {
 
     interface ActionListener {
         void onSearch();
+
         void onShare();
+
         void onCopy();
+
         void onTrans();
+
         void onCancel();
     }
 }
\ No newline at end of file
diff --git a/app/src/main/java/com/mmjang/ankihelper/ui/widget/BigBangLayout.java b/app/src/main/java/com/mmjang/ankihelper/ui/widget/BigBangLayout.java
index 4021385..30d1f9c 100644
--- a/app/src/main/java/com/mmjang/ankihelper/ui/widget/BigBangLayout.java
+++ b/app/src/main/java/com/mmjang/ankihelper/ui/widget/BigBangLayout.java
@@ -33,9 +33,11 @@ import android.widget.TextView;
 import com.mmjang.ankihelper.R;
 import com.mmjang.ankihelper.util.ConstantUtil;
 import com.mmjang.ankihelper.util.RegexUtil;
+import com.mmjang.ankihelper.util.StringUtil;
 import com.mmjang.ankihelper.util.ViewUtil;
 
 import java.util.ArrayList;
+import java.util.Collections;
 import java.util.HashSet;
 import java.util.List;
 import java.util.Set;
@@ -97,6 +99,7 @@ boolean autoAddBlanks = false;
 
     private boolean showSymbol = false;
     private boolean showSection = false;
+    private boolean showSpace = false;
 
     private Rect mDragSelectRect;
     private Paint mDragSelectPaint;
@@ -288,6 +291,19 @@ boolean autoAddBlanks = false;
         }
     }
 
+    public void setTextPaddingPort(int padding){
+        mTextPaddingPort=padding;
+        mNeedReDetectInMeasure=true;
+        if (mLines != null) {
+            for (Line line : mLines) {
+                List<Item> items = line.getItems();
+                for (Item item : items) {
+                    (item.view).setPadding(mTextPadding, mTextPaddingPort,mTextPadding, mTextPaddingPort);
+                }
+            }
+        }
+    }
+
     public int getTextBgRes() {
         return mTextBgRes;
     }
@@ -343,6 +359,16 @@ boolean autoAddBlanks = false;
         requestLayout();
     }
 
+    public boolean isShowSpace() {
+        return showSpace;
+    }
+
+    public void setShowSpace(boolean showSpace) {
+        this.showSpace = showSpace;
+        mNeedReDetectInMeasure=true;
+        requestLayout();
+    }
+
     public boolean isShowSection() {
         return showSection;
     }
@@ -394,6 +420,12 @@ boolean autoAddBlanks = false;
                         continue;
                     }
                 }
+                if (!showSpace) {
+                    if (StringUtil.isSpace(content)) {
+                        child.setVisibility(GONE);
+                        continue;
+                    }
+                }
                 if (content.contains(ENTER) || content.equals(ENTER_SYMBOL)) {
                     child.setVisibility(GONE);
                     mSectionIndex.add(i);
@@ -929,7 +961,11 @@ boolean autoAddBlanks = false;
         mActionListener = actionListener;
     }
 
-    class Line {
+    public List<Line> getLines(){
+        return Collections.unmodifiableList(mLines);
+    }
+
+    public class Line {
         int maxIndex;
         List<Item> items;
 
@@ -944,7 +980,7 @@ boolean autoAddBlanks = false;
             items.add(item);
         }
 
-        List<Item> getItems() {
+        public List<Item> getItems() {
             return items;
         }
 
@@ -1016,7 +1052,7 @@ boolean autoAddBlanks = false;
             return rect;
         }
 
-        boolean isSelected() {
+        public boolean isSelected() {
             return view.isSelected();
         }
 
@@ -1028,7 +1064,7 @@ boolean autoAddBlanks = false;
             view.setSelected(!view.isSelected());
         }
 
-        CharSequence getText() {
+        public CharSequence getText() {
             return ((TextView)view).getText().toString();
         }
 
@@ -1068,6 +1104,7 @@ boolean autoAddBlanks = false;
      * Action Listener
      */
     public interface ActionListener {
+
         void onSelected(String text);
 
         void onSearch(String text);
diff --git a/app/src/main/java/com/mmjang/ankihelper/util/RegexUtil.java b/app/src/main/java/com/mmjang/ankihelper/util/RegexUtil.java
index cdfd938..8edd0ac 100644
--- a/app/src/main/java/com/mmjang/ankihelper/util/RegexUtil.java
+++ b/app/src/main/java/com/mmjang/ankihelper/util/RegexUtil.java
@@ -6,9 +6,9 @@ import java.util.regex.Pattern;
 public class RegexUtil {
 
     public static final String SYMBOL_REX_WITH_BLANK = "[ ,\\./:\"\\\\\\[\\]\\|`~!@#\\$%\\^&\\*\\(\\)_\\+=<\\->\\?;'，。、；：‘’“”【】《》？\\{\\}！￥…（）—=]";
-    public static final String SYMBOL_REX_WITHOUT_BLANK = "[,\\./:\"\\\\\\[\\]\\|`~!@#\\$%\\^&\\*\\(\\)_\\+=<\\->\\?;'，。、；：‘’“”【】《》？\\{\\}！￥…（）—=]";
+    public static final String SYMBOL_REX_WITHOUT_BLANK = "[,\\./:\"\\\\\\[\\]\\|`~!! @#\\$%\\^&\\*\\(\\)_\\+=<\\->\\?;'，。、；：‘’“”【】《》？\\{\\}！￥…（）—=]";
 
-    public static String SYMBOL_REX = SYMBOL_REX_WITH_BLANK;
+    public static String SYMBOL_REX = SYMBOL_REX_WITHOUT_BLANK;
 
 //    public static void refreshSymbolSelection(){
 //        boolean b = SPHelper.getBoolean(ConstantUtil.TREAT_BLANKS_AS_SYMBOL, true);
diff --git a/app/src/main/java/com/mmjang/ankihelper/util/TextSegment.java b/app/src/main/java/com/mmjang/ankihelper/util/TextSegment.java
deleted file mode 100644
index 1463b61..0000000
--- a/app/src/main/java/com/mmjang/ankihelper/util/TextSegment.java
+++ /dev/null
@@ -1,27 +0,0 @@
-package com.mmjang.ankihelper.util;
-
-/**
- * Created by liao on 2017/5/4.
- */
-
-public class TextSegment {
-    private String text;
-    private int state;
-
-    public TextSegment(String seg, int sta) {
-        text = seg;
-        state = sta;
-    }
-
-    public String getText() {
-        return text;
-    }
-
-    public int getState() {
-        return state;
-    }
-
-    public void setState(int sta) {
-        state = sta;
-    }
-}
diff --git a/app/src/main/java/com/mmjang/ankihelper/util/TextSplitter.java b/app/src/main/java/com/mmjang/ankihelper/util/TextSplitter.java
index ad1f240..bd01d44 100644
--- a/app/src/main/java/com/mmjang/ankihelper/util/TextSplitter.java
+++ b/app/src/main/java/com/mmjang/ankihelper/util/TextSplitter.java
@@ -1,5 +1,7 @@
 package com.mmjang.ankihelper.util;
 
+import android.support.annotation.NonNull;
+
 import java.util.ArrayList;
 import java.util.List;
 
@@ -8,155 +10,56 @@ import java.util.List;
  */
 
 public class TextSplitter {
-    private String mSentence;
-    private List<TextSegment> mSegmentList = new ArrayList<>();
-    private int mStateText;
-    private int mStateNonText;
-
-    public TextSplitter(String sentence, int stateNonText, int stateText) {
-        mSentence = sentence;
-        mStateText = stateText;
-        mStateNonText = stateNonText;
-        process();
-    }
 
-    public List<TextSegment> getSegmentList() {
-        return mSegmentList;
-    }
+    private static final String DEVIDER = "__DEVIDER___DEVIDER__";
 
-    public String getStringFromState(int state) {
-        StringBuilder sb = new StringBuilder();
-        for (TextSegment ts : mSegmentList) {
-            if (ts.getState() == state) {
-                sb.append(ts.getText());
-                sb.append(" ");
+    @NonNull
+    public static List<String> getLocalSegments(String str) {
+        List<String> txts = new ArrayList<String>();
+        String s = "";
+        for (int i = 0; i < str.length(); i++) {
+            char first = str.charAt(i);
+            //当到达末尾的时候
+            if (i + 1 >= str.length()) {
+                s = s + first;
+                break;
             }
-        }
-        return sb.toString().trim();
-    }
+            char next = str.charAt(i + 1);
+            if ((RegexUtil.isChinese(first) && !RegexUtil.isChinese(next)) || (!RegexUtil.isChinese(first) && RegexUtil.isChinese(next)) ||
+                    (Character.isLetter(first) && !Character.isLetter(next)) || (Character.isDigit(first) && !Character.isDigit(next)) ||
+                    (isKorean(first) && !isKorean(next)) || (!isKorean(first) && isKorean(next))
 
-    public String getBoldSentence(int state) {
-        StringBuilder sb = new StringBuilder();
-        for (TextSegment ts : mSegmentList) {
-            if (ts.getState() == state) {
-                sb.append("<b>");
-                sb.append(ts.getText());
-                sb.append("</b>");
-                //sb.append(" ");
+                    ) {
+                s = s + first + DEVIDER;
+            } else if (RegexUtil.isSymbol(first)) {
+                s = s + DEVIDER + first + DEVIDER;
             } else {
-                sb.append(ts.getText());
+                s = s + first;
             }
         }
-        return sb.toString().trim();
-    }
-
-    public String getBlankSentence(int state) {
-        StringBuilder sb = new StringBuilder();
-        for (TextSegment ts : mSegmentList) {
-            if (ts.getState() == state) {
-                sb.append("{{c1::" + ts.getText() + "}}");
-            } else {
-                sb.append(ts.getText());
+        str = s;
+        str.replace("\n", DEVIDER + "\n" + DEVIDER);
+        String[] texts = str.split(DEVIDER);
+        for (String text : texts) {
+            if (text.equals(DEVIDER))
+                continue;
+            //当首字母是英文字母时，默认该字符为英文
+            if (RegexUtil.isEnglish(text)) {
+                txts.add(text);
+                continue;
             }
-        }
-        return sb.toString().trim();
-    }
-
-    private void process() {
-        //this is a finite state machine to split sentence
-
-        int sInit = 0;//0-init 1-in word  2- in nonwordInit
-        int sWord = 1;
-        int sNonWord = 2;
-
-        int state = sInit;
-        StringBuilder sb = new StringBuilder();
-        for (char ch : mSentence.toCharArray()) {
-
-            if (isWordcharacter(ch)) {
-                if (state == sInit) {
-                    sb.append(ch);
-                }
-                if (state == sWord) {
-                    sb.append(ch);
-                }
-                if (state == sNonWord) {
-                    mSegmentList.add(new TextSegment(sb.toString(), mStateNonText));
-                    sb = new StringBuilder();
-                    sb.append(ch);
-                }
-                state = sWord;
-            } else {
-                if (isChinese(ch)) {
-                    if (state == sInit) {
-                        mSegmentList.add(new TextSegment(Character.toString(ch), mStateText));
-                        state = sInit;
-                    } else {
-                        if (state == sWord) {
-                            mSegmentList.add(new TextSegment(sb.toString(), mStateText));
-                            mSegmentList.add(new TextSegment(Character.toString(ch), mStateText));
-                            sb = new StringBuilder();
-                            state = sNonWord;
-                        } else {
-                            mSegmentList.add(new TextSegment(sb.toString(), mStateNonText));
-                            mSegmentList.add(new TextSegment(Character.toString(ch), mStateText));
-                            sb = new StringBuilder();
-                            state = sNonWord;
-                        }
-                    }
-                } else {
-                    if (state == sInit) {
-                        sb.append(ch);
-                    }
-                    if (state == sWord) {
-                        mSegmentList.add(new TextSegment(sb.toString(), mStateText));
-                        sb = new StringBuilder();
-                        sb.append(ch);
-                    }
-                    if (state == sNonWord) {
-                        sb.append(ch);
-                    }
-                    state = sNonWord;
-                }
+            if (RegexUtil.isNumber(text)) {
+                txts.add(text);
+                continue;
             }
-        }
-        if (state == sWord) {
-            mSegmentList.add(new TextSegment(sb.toString(), mStateText));
-        }
-        if (state == sNonWord) {
-            mSegmentList.add(new TextSegment(sb.toString(), mStateNonText));
-        }
-    }
-
-    private boolean isWordcharacter(char ch) {
-        //(Ó	ó)	P	p	Q	q	R	r	S	s	T	t	U	u	(Ú	ú)	(Ü	ü)
-        //V	v	W	w	X	x	Y	y	Z	z
-        char[] frSpecial = "ÄäàaçèéêëîïôùûœÖöß".toCharArray();
-        for (char c : frSpecial) {
-            if (ch == c) {
-                return true;
+            for (int i = 0; i < text.length(); i++) {
+                txts.add(text.charAt(i) + "");
             }
         }
-        if (ch == '-' || (ch >= 'A' && ch <= 'Z') || (ch >= 'a' && ch <= 'z') ||
-                ch == 'Á' ||
-                ch == 'á' ||
-                ch == 'É' ||
-                ch == 'é' ||
-                ch == 'Í' ||
-                ch == 'í' ||
-                ch == 'Ó' ||
-                ch == 'ó' ||
-                ch == 'Ú' ||
-                ch == 'ú' ||
-                ch == 'Ü' ||
-                ch == 'ü'
-                ) {
-            return true;
-        }
-        return ch >= '0' && ch <= '9';
+        return txts;
     }
 
-    private boolean isChinese(char ch) {
-        return ch >= 0x0800 && ch <= 0x9FBB;
+    private static boolean isKorean(char ch){
+        return ch>='가' && ch<='힣';
     }
-}
+}
\ No newline at end of file
diff --git a/app/src/main/res/drawable-xxhdpi/bigbang_item_bg_nor.9.png b/app/src/main/res/drawable-xxhdpi/bigbang_item_bg_nor.9.png
deleted file mode 100644
index 166e9aa..0000000
Binary files a/app/src/main/res/drawable-xxhdpi/bigbang_item_bg_nor.9.png and /dev/null differ
diff --git a/app/src/main/res/drawable-xxhdpi/bigbang_item_bg_nor_section.9.png b/app/src/main/res/drawable-xxhdpi/bigbang_item_bg_nor_section.9.png
deleted file mode 100644
index c1e762e..0000000
Binary files a/app/src/main/res/drawable-xxhdpi/bigbang_item_bg_nor_section.9.png and /dev/null differ
diff --git a/app/src/main/res/drawable-xxhdpi/bigbang_item_bg_sel.9.png b/app/src/main/res/drawable-xxhdpi/bigbang_item_bg_sel.9.png
deleted file mode 100644
index 5932ee6..0000000
Binary files a/app/src/main/res/drawable-xxhdpi/bigbang_item_bg_sel.9.png and /dev/null differ
diff --git a/app/src/main/res/drawable-xxhdpi/bigbang_item_bg_sel_section.9.png b/app/src/main/res/drawable-xxhdpi/bigbang_item_bg_sel_section.9.png
deleted file mode 100644
index 46d1d93..0000000
Binary files a/app/src/main/res/drawable-xxhdpi/bigbang_item_bg_sel_section.9.png and /dev/null differ
diff --git a/app/src/main/res/layout/activity_popup.xml b/app/src/main/res/layout/activity_popup.xml
index d3d34fa..fe54920 100644
--- a/app/src/main/res/layout/activity_popup.xml
+++ b/app/src/main/res/layout/activity_popup.xml
@@ -125,21 +125,19 @@
                         android:layout_marginBottom="5dp"
                         android:layout_marginLeft="12dp"
                         android:layout_marginRight="12dp"
+                        android:layout_gravity="center"
                         android:elevation="2dp"
                         app:cardCornerRadius="4dp">
+                        <RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
+                            android:layout_width="match_parent"
+                            android:layout_height="wrap_content"
+                            android:orientation="vertical">
 
-                        <org.apmem.tools.layouts.FlowLayout
-                            android:id="@+id/words_select_box"
+                        <com.mmjang.ankihelper.ui.widget.BigBangLayoutWrapper
                             android:layout_width="match_parent"
                             android:layout_height="wrap_content"
-                            android:layout_marginBottom="5dp"
-                            android:layout_marginLeft="12dp"
-                            android:layout_marginRight="12dp"
-                            android:layout_marginTop="5dp"
-                            android:orientation="horizontal"
-                            app:layoutDirection="ltr">
-
-                        </org.apmem.tools.layouts.FlowLayout>
+                            android:id="@+id/bigbang_wrapper"/>
+                        </RelativeLayout>
                     </android.support.v7.widget.CardView>
 
 
